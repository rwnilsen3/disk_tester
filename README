Disk Tester - A distributed client/server disk testing application.

Installation Dependencies:
pip install psutil


Design:
* Multithreaded server, one thread per client, db writes all done in main thread
* Multi-process clients, one for disk test, one for heartbeats, one for monitoring.
  Communicating via pipes
* Disk tester writes random data to simulate worst case for storage that does compression
  Data written in O_DIRECT mode to isolate disk performance from OS caching effects
* Log performance metrics from each chunk so that one could later build a chart showing disk performance versus time.


How to use server:

    python server.py

How to use client:

    python client.py --write-chunk-size 10 .


    usage: client.py [-h] [--results-server RESULTS_SERVER]
                     [--test-duration TEST_DURATION]
                     [--write-chunk-size WRITE_CHUNK_SIZE]
                     [--max-file-size MAX_FILE_SIZE]
                     working-directory

    A filesystem and disk write performance measurement utility

    positional arguments:
      working-directory     Location on filesystem where file write performance
                            should be tested

    optional arguments:
      -h, --help            show this help message and exit
      --results-server RESULTS_SERVER
                            Hostname of the server to which the client should send
                            status and results
      --test-duration TEST_DURATION
                            Length of time in seconds for the test to run
      --write-chunk-size WRITE_CHUNK_SIZE
                            Size of chunks to be written to the file, in MiB
      --max-file-size MAX_FILE_SIZE
                            Maximum size in of test output files, in MiB



Things that could be improved:
* The protocol for communication between clients and would perhaps be better defined rather than rely upon typo-prone strings all over the place.
* Unit tests would be nice, but there are so many OS services being called making things messy.  So then, refactor with some dependency injection for testibility?
